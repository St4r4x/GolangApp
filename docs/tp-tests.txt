# Test Execution Commands for Cats API Project

## Overview
This file contains all the essential commands to run unit tests and API tests for the Cats API project.

## Prerequisites
- Go 1.x installed
- Project dependencies installed (`go mod tidy`)
- Server can be started for API tests

## Unit Tests

### Run All Unit Tests
```bash
go test -v .
```

### Run Unit Tests with Coverage
```bash
go test -coverprofile=coverage.out -v .
go tool cover -html=coverage.out -o docs/coverage.html
```

### Run Specific Test Categories
```bash
# Run only unit tests in test/unit directory
go test -v ./test/unit/...

# Run only mocked tests
go test -v ./test/mocked/...

# Run only integration tests
go test -v ./test/integration/...
```

## API Tests

### Prerequisites for API Tests
1. Start the server first:
```bash
go run .
# Server will start on http://localhost:8080
# Keep this terminal running
```

2. In a new terminal, run API tests:
```bash
# Run comprehensive API tests
go test -v ./test/apitests/...

# Run API tests with detailed output
go test -v -run TestAPI ./test/apitests/...
```

### Manual API Testing
Use the provided HTTP file for manual testing:
```bash
# File: test/test.http
# Contains pre-defined HTTP requests for all endpoints
# Can be used with VS Code REST Client extension or similar tools
```

## Test File Organization

### Main Package Tests (Root Directory)
- `main_test.go` - Consolidated tests for main package including:
  - createCat and deleteCat function tests
  - yml2json converter function tests
  - Main function component tests
  - CRUD operation integration tests

### Organized Test Directories
- `test/unit/` - Unit tests for individual components
- `test/integration/` - Integration tests for combined functionality
- `test/apitests/` - API endpoint tests requiring running server
- `test/mocked/` - Tests using mocked dependencies

## Coverage Goals
- Target: 85%+ code coverage
- Current: ~64.6% with main package tests, ~86.6% with all test suites
- Focus: All handler functions, API converter, core business logic

## Continuous Integration

### Quick CI Commands
```bash
# Run comprehensive CI pipeline locally
make ci-local

# Run pre-commit checks
make pre-commit

# Run comprehensive test script
./scripts/test-all.sh
```

### Manual CI/CD Pipeline Steps
Add to your CI/CD pipeline:
```bash
# Static analysis
go fmt ./...
go vet ./...
staticcheck ./...

# Run all test suites
go test -v ./test/unit/...
go test -v ./test/integration/...
go test -v ./test/mocked/...
go test -v .

# Generate coverage report
go test -coverprofile=coverage.out ./... -coverpkg=./...
go tool cover -func coverage.out

# API tests (requires server startup)
go run . &
SERVER_PID=$!
sleep 5
go test -v ./test/apitests/...
kill $SERVER_PID

# Build and test
go build -o bin/cats-api .
docker build -t cats-api .
```

### GitHub Actions
The project includes a comprehensive GitHub Actions CI/CD pipeline that:
- Runs linting and formatting checks
- Executes all test suites in parallel
- Generates coverage reports
- Builds and pushes Docker images
- Performs security scans
- Runs API tests against the built container

## Troubleshooting
- If API tests fail, ensure server is running on port 8080
- If coverage is low, check that all test files are being executed
- For import issues, run `go mod tidy`
- Check logs in logs/server.log for server-side issues

## Project Structure
```
GolangApp/
├── main_test.go           # Consolidated main package tests
├── docs/                  # Documentation and reports
│   ├── tp-tests.txt      # This file
│   ├── TESTING.md        # Testing methodology
│   ├── coverage.html     # Coverage report
│   └── README.md         # Project documentation
├── test/                  # Organized test suites
│   ├── unit/             # Unit tests
│   ├── integration/      # Integration tests
│   ├── apitests/         # API tests
│   ├── mocked/           # Mocked tests
│   └── test.http         # Manual API test file
└── logs/                  # Log files
    └── server.log        # Application logs
```

## Last Updated
Updated for clean project structure with consolidated main package tests.
